// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: accounts.sql

package database

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
insert into account (
  email, password, given_name, family_name
) values (
  $1, $2, $3, $4
) returning id, created_at, updated_at, given_name, family_name, email, password
`

type CreateAccountParams struct {
	Email      string `json:"email"`
	Password   string `json:"password"`
	GivenName  string `json:"given_name"`
	FamilyName string `json:"family_name"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.Email,
		arg.Password,
		arg.GivenName,
		arg.FamilyName,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
delete from account
where id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, id)
	return err
}

const getAccount = `-- name: GetAccount :one
select id, created_at, updated_at, given_name, family_name, email, password from account
where id = $1 limit 1
`

func (q *Queries) GetAccount(ctx context.Context, id int32) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
select id, created_at, updated_at, given_name, family_name, email, password from account
where email = $1 limit 1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.Password,
	)
	return i, err
}

const getAllAccounts = `-- name: GetAllAccounts :many
select id, created_at, updated_at, given_name, family_name, email, password from account
order by id
`

func (q *Queries) GetAllAccounts(ctx context.Context) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAllAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GivenName,
			&i.FamilyName,
			&i.Email,
			&i.Password,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccount = `-- name: UpdateAccount :one
update account
  set email = $2, password = $3, given_name = $4, family_name = $5, updated_at = NOW()
where id = $1
returning id, created_at, updated_at, given_name, family_name, email, password
`

type UpdateAccountParams struct {
	ID         int32  `json:"id"`
	Email      string `json:"email"`
	Password   string `json:"password"`
	GivenName  string `json:"given_name"`
	FamilyName string `json:"family_name"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.GivenName,
		arg.FamilyName,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GivenName,
		&i.FamilyName,
		&i.Email,
		&i.Password,
	)
	return i, err
}
