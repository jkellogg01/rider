// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bands.sql

package database

import (
	"context"
)

const createAccountBand = `-- name: CreateAccountBand :exec
insert into account_band (
  account_id,
  band_id,
  account_is_admin
) values ($1, $2, $3)
`

type CreateAccountBandParams struct {
	AccountID      int32
	BandID         int32
	AccountIsAdmin bool
}

func (q *Queries) CreateAccountBand(ctx context.Context, arg CreateAccountBandParams) error {
	_, err := q.db.ExecContext(ctx, createAccountBand, arg.AccountID, arg.BandID, arg.AccountIsAdmin)
	return err
}

const createBand = `-- name: CreateBand :exec
insert into band (name) values ($1)
`

func (q *Queries) CreateBand(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, createBand, name)
	return err
}

const getAccountBands = `-- name: GetAccountBands :many
select id, created_at, updated_at, name from band where exists (
  select id, account_id, band_id, created_at, updated_at, account_is_admin from account_band where account_id = $1 and band_id = band.id
)
`

func (q *Queries) GetAccountBands(ctx context.Context, accountID int32) ([]Band, error) {
	rows, err := q.db.QueryContext(ctx, getAccountBands, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Band
	for rows.Next() {
		var i Band
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
