// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: invitations.sql

package database

import (
	"context"
	"time"
)

const createInvitation = `-- name: CreateInvitation :one
INSERT INTO invitation (
  creator_id, band_id, body, expires_at
) VALUES (
  $1, $2, $3, $4
) RETURNING id, body, creator_id, band_id, created_at, expires_at
`

type CreateInvitationParams struct {
	CreatorID int32     `json:"creator_id"`
	BandID    int32     `json:"band_id"`
	Body      string    `json:"body"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) CreateInvitation(ctx context.Context, arg CreateInvitationParams) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, createInvitation,
		arg.CreatorID,
		arg.BandID,
		arg.Body,
		arg.ExpiresAt,
	)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.CreatorID,
		&i.BandID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const cullInvitations = `-- name: CullInvitations :exec
DELETE FROM invitation
WHERE expires_at < NOW() - interval '7 days'
`

func (q *Queries) CullInvitations(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, cullInvitations)
	return err
}

const getInvitation = `-- name: GetInvitation :one
SELECT id, body, creator_id, band_id, created_at, expires_at FROM invitation 
WHERE body = $1
GROUP BY id
LIMIT 1
`

func (q *Queries) GetInvitation(ctx context.Context, body string) (Invitation, error) {
	row := q.db.QueryRowContext(ctx, getInvitation, body)
	var i Invitation
	err := row.Scan(
		&i.ID,
		&i.Body,
		&i.CreatorID,
		&i.BandID,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}
